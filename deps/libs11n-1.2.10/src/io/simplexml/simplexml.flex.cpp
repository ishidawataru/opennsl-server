#define yyFlexLexer simplexml_data_nodeFlexLexer
#define yywrap simplexml_data_nodewrap

/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header: /home/daffy/u0/vern/flex/RCS/flex.skl,v 2.91 96/09/10 16:58:48 vern Exp $
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5



/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>
#include <iostream>

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
	{
	std::istream* yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};


/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer



static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t ));
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)

typedef unsigned char YY_CHAR;
#define yytext_ptr yytext

#include <s11n.net/s11n/io/FlexLexer.hpp>


/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 19
#define YY_END_OF_BUFFER 20
static yyconst short int yy_accept[251] =
    {   0,
        0,    0,    0,    0,    0,    0,    0,    0,   20,   18,
       18,   18,    4,   12,   12,   12,   12,   12,   11,   10,
       12,   19,   17,   19,   19,    6,    6,    0,    5,    0,
        0,    0,    0,    7,    0,    7,    4,    0,    0,    0,
        0,    9,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    7,    7,    0,    0,    0,    0,
        7,    0,    0,    7,    1,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    8,    8,    0,    0,   16,    0,
        3,   14,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   13,    0,    0,    0,    0,    7,    0,    0,    0,

        0,    0,    0,    0,    0,    8,    0,    0,    0,    8,
        8,    8,    0,    0,    8,   15,    0,    7,    0,    7,
        0,    0,    0,    0,    0,    0,    7,    0,    0,    7,
        0,    0,    8,    0,    0,    0,    0,    0,    0,    8,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    8,    0,    8,    8,    0,    0,    8,
        0,    0,    0,    0,   13,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    7,
        7,    0,    0,    0,    0,    0,    2,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    8,    8,    0,

        0,   13,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    7,    0,    0,    7,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    8,    0,
        0,    8,    0,    0,    0,   13,    0,    0,    0,    0,
        0,    7,    0,    0,    0,    0,    8,    0,    0,    0
    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    4,    5,    6,    7,    1,    1,    1,    8,    1,
        1,    1,    9,   10,   11,   12,   13,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   15,    1,   16,
       17,   18,   19,    1,   20,   21,   22,   23,   24,   21,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   26,   25,   25,   25,   25,   25,   25,
       27,   28,   29,    1,   25,    1,   21,   21,   21,   21,

       24,   21,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst int yy_meta[30] =
    {   0,
        1,    2,    1,    3,    1,    1,    1,    1,    4,    5,
        4,    4,    1,    6,    3,    3,    1,    7,    1,    6,
        6,    6,    6,    6,    8,    8,    1,    1,    1
    } ;

static yyconst short int yy_base[317] =
    {   0,
        0,    1,   17,    0,   44,   46,  410,  409,  437, 1447,
        4,   58,    7, 1447,    0,  421,   46,   73, 1447, 1447,
       62, 1447, 1447,  423,  428, 1447,  403,   49, 1447,   48,
        1,  417,   91,   94,    0,   99,  122,  414,  115,  114,
      131, 1447,  120,    0,  410,    0,  144,    0,  131,  406,
      412,  404,  409,  397,  147,   77,   54,  404,  170,  195,
       98,  402,    0,  132,    0,  164,  189,    0,  210,  148,
        0,  408,  148,  399,  217,  165,  396,  395, 1447,  397,
     1447, 1447,  384,  193,  207,  242,  265,  204,  382,  390,
        0, 1447,  281,    0,  302,  389,  382,   90,  378,  166,

      219,  373,  317,  230,  181, 1447,  195,    0,  377,  203,
      133,  235,  362,    0,  241, 1447,  356,  357,  348,  330,
      254,  261,    0,  332,  325,  349,  242,  316,  364,  246,
        0,  256,  245,    0,  267,  271,    0,  379,  315,  309,
      289,  282,  300,  295,  396,  292,  411,  322,    0,  273,
      426,  441,    0,  289,  284,  280,  286,  269,  456,  289,
      257,    0,  247,  293,    0,  471,  486,  235,  501,  313,
      516,    0,    0,  301,  203,  531,  546,  206,  561,  307,
      576,  323,  591,    0,  606,  621, 1447,  201,  636,  341,
      653,  331,  668,  683,  698,  194,  713,  337,  728,  190,

      339,    0,  743,  758,  773,  788,  163,  803,  343,  351,
      818,  833,  848,  863,  145,  878,  355,    0,  357,  893,
      908,  925,  130,  940,  384,    0,  363,  955,  970,  118,
      985,  369,    0,  115,  375,    0, 1000, 1015,    0,  386,
     1030, 1045,    0, 1060, 1077,    0, 1092,    0,    0, 1447,
     1110, 1118, 1126, 1131, 1139, 1142, 1149, 1152, 1155, 1161,
     1169,  115, 1177, 1180, 1183, 1189, 1195,   86, 1198, 1201,
     1207, 1213, 1216,   67, 1219, 1225, 1231, 1234, 1240, 1246,
       59, 1252, 1255, 1261, 1267, 1273,   55, 1276, 1282, 1288,
     1294, 1300,   48, 1306, 1312, 1318, 1324, 1330, 1336, 1342,

     1348, 1354, 1360, 1366, 1372, 1378, 1384, 1390, 1396, 1402,
     1408, 1414, 1420, 1426, 1432, 1438
    } ;

static yyconst short int yy_def[317] =
    {   0,
      251,  251,  250,    3,  252,  252,  253,  253,  250,  250,
      250,  250,  250,  250,  250,  250,  250,  250,  250,  250,
       18,  250,  250,  250,  250,  250,  250,  250,  250,  250,
      250,  250,  254,  250,  255,   34,  250,  250,  250,  250,
      250,  250,  250,   18,  250,  256,  250,   21,   21,  250,
      250,  250,  250,  250,  250,  250,  250,  250,  250,  257,
      250,  250,  258,   36,  255,  250,  250,  259,  260,  261,
      262,  263,  250,  250,  250,   75,  250,   21,  250,  250,
      250,  250,  250,  250,  250,  250,  250,  250,   87,  250,
      264,  250,   59,  265,  266,  250,   36,  250,  250,  250,

      259,  267,  260,  267,  261,  250,  261,  268,  263,  250,
      250,  250,  250,  269,   76,  250,  250,  250,  250,  250,
      250,  250,  270,  271,  250,  257,  265,  272,  266,  272,
      273,  267,  261,  274,  250,  250,  275,  276,  250,   76,
      250,  250,  250,  250,  270,  277,  271,  277,  278,  272,
      279,  280,  281,  250,  250,  250,  275,  282,  276,  282,
      250,  283,  148,  277,  148,  284,  285,  286,  279,  286,
      280,  287,  288,  282,  250,  289,  290,  291,  284,  291,
      285,  286,  292,  293,  294,  295,  250,  296,  289,  296,
      290,  291,  297,  298,  299,  300,  294,  300,  295,  190,

      296,  190,  301,  302,  303,  298,  304,  299,  304,  300,
      305,  306,  307,  302,  308,  303,  308,  169,  304,  309,
      310,  306,  311,  307,  311,  179,  308,  312,  309,  313,
      310,  313,  189,  225,  311,  225,  314,  312,  197,  313,
      315,  314,  208,  316,  315,  216,  316,  224,  231,    0,
      250,  250,  250,  250,  250,  250,  250,  250,  250,  250,
      250,  250,  250,  250,  250,  250,  250,  250,  250,  250,
      250,  250,  250,  250,  250,  250,  250,  250,  250,  250,
      250,  250,  250,  250,  250,  250,  250,  250,  250,  250,
      250,  250,  250,  250,  250,  250,  250,  250,  250,  250,

      250,  250,  250,  250,  250,  250,  250,  250,  250,  250,
      250,  250,  250,  250,  250,  250
    } ;

static yyconst short int yy_nxt[1477] =
    {   0,
      250,   11,   13,   11,   13,   28,   29,   28,   37,   29,
       37,   38,   32,   39,   55,   12,   12,   14,   14,   14,
       14,   14,   14,   14,   14,   15,   14,   15,   16,   17,
       18,   14,   19,   14,   20,   14,   21,   21,   21,   21,
       21,   21,   21,   14,   14,   14,   23,   41,   23,   41,
       28,   29,   28,  106,   24,   23,   24,   23,   53,   25,
      184,   25,   30,   42,  172,   58,   31,   86,   31,   32,
       33,   34,  153,  250,   54,   48,   35,   36,   36,   36,
       36,   36,   36,   36,   43,   48,   44,   45,   46,   47,
       56,  134,   48,   48,   48,   48,   49,   48,   48,   57,

       85,   57,   58,   98,   59,   61,   47,   34,   62,   63,
      250,   56,   36,   36,   36,   36,   36,   64,   36,   36,
      108,   84,   36,   37,   29,   37,   43,   40,   39,  223,
       47,   47,   41,   40,   41,  232,   47,   67,   66,   77,
       96,   77,   96,   66,   78,   97,  111,  225,   42,   70,
       71,   72,   73,  106,   73,   74,  136,   75,   61,   74,
       55,  110,  217,   76,   76,   76,   76,   76,   76,   76,
       84,   88,   77,   88,   77,  107,  250,   98,   76,  100,
      209,   89,   47,   59,   90,   91,  106,   92,   76,   60,
       60,   60,   60,   93,   60,   60,   88,   99,   88,   99,

      133,   96,  100,   96,  188,   88,  118,   88,  107,   90,
       91,  198,   92,  102,  112,  119,  110,  119,  190,  102,
      120,   92,  107,  180,  102,  102,  135,  104,  112,  187,
       75,  113,  114,   45,  131,   47,   76,   76,   76,   76,
      115,   76,   76,   88,  132,   88,   47,  104,  111,  139,
      106,  139,  170,   89,  140,   86,   62,  149,  135,   92,
      150,  146,  125,  130,  125,  121,   88,  142,   88,  143,
      152,  143,  107,  104,  144,  139,  175,  139,   87,  155,
      154,  155,   92,   88,  156,   88,  160,  167,  122,  125,
      130,  125,  250,  156,  126,  142,   88,  156,   88,   92,

      113,  173,  154,  174,   60,  128,  160,  177,  144,  148,
      148,  128,   92,  144,  161,  186,  128,  128,  160,  130,
      102,  192,  140,   88,  180,  163,  102,  182,  154,   47,
      170,  102,  102,  130,  104,  146,  164,  194,  142,  165,
      170,  146,   88,  120,  200,  204,  146,  146,  180,  148,
       88,  210,   88,  212,  198,  201,  190,  219,  202,   47,
      209,  120,  126,   90,   91,  220,   92,  128,  198,  227,
      118,  228,  217,  128,  209,  141,  137,  237,  128,  128,
      217,  130,  158,  240,  106,   88,  232,  234,  158,  241,
      104,  100,  225,  158,  158,   97,  160,   88,  235,   88,

      244,  236,  118,  232,  123,  121,  117,  116,   78,   98,
       90,  162,  111,   92,  146,  106,   94,   87,   83,   82,
      146,   81,   80,   79,   68,  146,  146,   40,  148,  168,
       56,   52,   51,   50,   40,  168,  250,   27,   27,  250,
      168,  168,  250,  170,  102,  250,  250,  250,  250,  250,
      102,  250,  250,  250,  250,  102,  102,  250,  104,  158,
      250,  250,  250,  250,  250,  158,  250,  250,  250,  250,
      158,  158,  250,  160,  178,  250,  250,  250,  250,  250,
      178,  250,  250,  250,  250,  178,  178,  250,  180,  128,
      250,  250,  250,  250,  250,  128,  250,  250,  250,  250,

      128,  128,  250,  130,  168,  250,  250,  250,  250,  250,
      168,  250,  250,  250,  250,  168,  168,  250,  170,  102,
      250,  250,  250,  250,  250,  102,  250,  250,  250,  250,
      132,  183,   47,  104,  188,  250,  250,  250,  250,  250,
      188,  250,  250,  250,  250,  188,  188,  250,  190,  146,
      250,  250,  250,  250,  250,  146,  250,  250,  250,  250,
      146,  146,  250,  148,  178,  250,  250,  250,  250,  250,
      178,  250,  250,  250,  250,  178,  178,  250,  180,  128,
      250,  250,  250,  250,  250,  128,  250,  250,  250,  250,
      150,  193,  250,  130,  102,  250,  250,  250,  250,  250,

      102,  250,  250,  250,  250,  102,  102,  250,  104,  196,
      250,  250,  250,  250,  250,  196,  250,  250,  250,  250,
      196,  196,  250,  198,  158,  250,  250,  250,  250,  250,
      158,  250,  250,  250,  250,  158,  158,  250,  160,  188,
      250,  250,  250,  250,  250,  188,  250,  250,  250,  250,
      188,  188,  250,  190,   88,  250,  163,  250,  250,  250,
      250,  250,  146,  250,  250,  250,  250,  164,  203,  250,
      165,  128,  250,  250,  250,  250,  250,  128,  250,  250,
      250,  250,  128,  128,  250,  130,  168,  250,  250,  250,
      250,  250,  168,  250,  250,  250,  250,  168,  168,  250,

      170,  207,  250,  250,  250,  250,  250,  207,  250,  250,
      250,  250,  207,  207,  250,  209,  196,  250,  250,  250,
      250,  250,  196,  250,  250,  250,  250,  196,  196,  250,
      198,  158,  250,  250,  250,  250,  250,  158,  250,  250,
      250,  250,  174,  211,  250,  160,  146,  250,  250,  250,
      250,  250,  146,  250,  250,  250,  250,  146,  146,  250,
      148,  178,  250,  250,  250,  250,  250,  178,  250,  250,
      250,  250,  178,  178,  250,  180,  215,  250,  250,  250,
      250,  250,  215,  250,  250,  250,  250,  215,  215,  250,
      217,  168,  250,  250,  250,  250,  250,  168,  250,  250,

      250,  250,  182,  218,   47,  170,  207,  250,  250,  250,
      250,  250,  207,  250,  250,  250,  250,  207,  207,  250,
      209,  158,  250,  250,  250,  250,  250,  158,  250,  250,
      250,  250,  158,  158,  250,  160,  188,  250,  250,  250,
      250,  250,  188,  250,  250,  250,  250,  188,  188,  250,
      190,  223,  250,  250,  250,  250,  250,  223,  250,  250,
      250,  250,  223,  223,  250,  225,  178,  250,  250,  250,
      250,  250,  178,  250,  250,  250,  250,  192,  226,  250,
      180,  215,  250,  250,  250,  250,  250,  215,  250,  250,
      250,  250,  215,  215,  250,  217,  196,  250,  250,  250,

      250,  250,  196,  250,  250,  250,  250,  196,  196,  250,
      198,  230,  250,  250,  250,  250,  250,  230,  250,  250,
      250,  250,  230,  230,  250,  232,   88,  250,  200,  250,
      250,  250,  250,  250,  188,  250,  250,  250,  250,  201,
      233,  250,  202,  223,  250,  250,  250,  250,  250,  223,
      250,  250,  250,  250,  223,  223,  250,  225,  207,  250,
      250,  250,  250,  250,  207,  250,  250,  250,  250,  207,
      207,  250,  209,  196,  250,  250,  250,  250,  250,  196,
      250,  250,  250,  250,  210,  239,  250,  198,  230,  250,
      250,  250,  250,  250,  230,  250,  250,  250,  250,  230,

      230,  250,  232,  215,  250,  250,  250,  250,  250,  215,
      250,  250,  250,  250,  215,  215,  250,  217,  207,  250,
      250,  250,  250,  250,  207,  250,  250,  250,  250,  219,
      243,   47,  209,  223,  250,  250,  250,  250,  250,  223,
      250,  250,  250,  250,  223,  223,  250,  225,  215,  250,
      250,  250,  250,  250,  215,  250,  250,  250,  250,  227,
      246,  250,  217,  230,  250,  250,  250,  250,  250,  230,
      250,  250,  250,  250,  230,  230,  250,  232,   88,  250,
      234,  250,  250,  250,  250,  250,  223,  250,  250,  250,
      250,  235,  248,  250,  236,  230,  250,  250,  250,  250,

      250,  230,  250,  250,  250,  250,  240,  249,  250,  232,
       10,   10,   10,   10,   10,   10,   10,   10,   22,   22,
       22,   22,   22,   22,   22,   22,   26,   26,   26,   26,
       26,   26,   26,   26,   60,  250,   60,  250,   60,   65,
       65,   65,   65,   65,   65,  250,   65,   69,  250,   69,
       60,   60,  250,  250,   60,   60,   60,   95,  250,   95,
      101,  250,  101,  103,  250,  103,  103,  103,  103,  105,
      105,  105,  105,  105,  105,  105,  105,  109,  109,  109,
      109,  109,  109,  109,  109,  124,  250,  124,  127,  250,
      127,  129,  250,  129,  129,  129,  129,  102,  250,  102,

      102,  102,  102,  138,  250,  138,  145,  250,  145,  147,
      250,  147,  147,  147,  147,  128,  250,  128,  128,  128,
      128,  151,  250,  151,  157,  250,  157,  159,  250,  159,
      159,  159,  159,  146,  250,  146,  146,  146,  146,  166,
      250,  166,  169,  250,  169,  169,  169,  169,  171,  250,
      171,  171,  171,  171,  158,  250,  158,  158,  158,  158,
      176,  250,  176,  179,  250,  179,  179,  179,  179,  181,
      250,  181,  181,  181,  181,  168,  250,  168,  168,  168,
      168,  185,  250,  185,  189,  250,  189,  189,  189,  189,
      191,  250,  191,  191,  191,  191,  178,  250,  178,  178,

      178,  178,  195,  250,  195,  195,  195,  195,  197,  250,
      197,  197,  197,  197,  199,  250,  199,  199,  199,  199,
      188,  250,  188,  188,  188,  188,  205,  250,  205,  205,
      205,  205,  206,  250,  206,  206,  206,  206,  208,  250,
      208,  208,  208,  208,  196,  250,  196,  196,  196,  196,
      213,  250,  213,  213,  213,  213,  214,  250,  214,  214,
      214,  214,  216,  250,  216,  216,  216,  216,  207,  250,
      207,  207,  207,  207,  221,  250,  221,  221,  221,  221,
      222,  250,  222,  222,  222,  222,  224,  250,  224,  224,
      224,  224,  215,  250,  215,  215,  215,  215,  229,  250,

      229,  229,  229,  229,  231,  250,  231,  231,  231,  231,
      223,  250,  223,  223,  223,  223,  238,  250,  238,  238,
      238,  238,  230,  250,  230,  230,  230,  230,  242,  250,
      242,  242,  242,  242,  245,  250,  245,  245,  245,  245,
      247,  250,  247,  247,  247,  247,    9,  250,  250,  250,
      250,  250,  250,  250,  250,  250,  250,  250,  250,  250,
      250,  250,  250,  250,  250,  250,  250,  250,  250,  250,
      250,  250,  250,  250,  250,  250
    } ;

static yyconst short int yy_chk[1477] =
    {   0,
        0,    1,    2,    1,    2,   11,   11,   11,   13,   13,
       13,   15,   31,   15,   31,    1,    2,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    5,   17,    6,   17,
       28,   28,   28,  293,    5,    5,    6,    6,   30,    5,
      287,    6,   12,   17,  281,   57,   12,   57,   12,   12,
       12,   12,  274,   21,   30,   21,   12,   12,   12,   12,
       12,   12,   12,   12,   18,   21,   18,   18,   18,   18,
       56,  268,   18,   18,   18,   18,   18,   18,   18,   33,

       56,   33,   33,   98,   33,   34,   98,   34,   34,   34,
       36,   61,   36,   34,   34,   34,   34,   34,   34,   34,
      262,   61,   36,   37,   37,   37,   39,   40,   39,  234,
       40,   39,   41,   43,   41,  230,   43,   40,   39,   49,
       64,   49,   64,   43,   49,   64,  111,  223,   41,   47,
       47,   47,   47,   70,   47,   47,  111,   47,   55,   73,
       55,   73,  215,   47,   47,   47,   47,   47,   47,   47,
       55,   59,   66,   59,   66,   70,   76,   66,   76,  100,
      207,   59,  100,   59,   59,   59,  105,   59,   76,   59,
       59,   59,   59,   59,   59,   59,   60,   67,   60,   67,

      107,   84,   67,   84,  200,   88,   84,   88,  105,   60,
       60,  196,   60,   69,  110,   85,  110,   85,  188,   69,
       85,   88,  107,  178,   69,   69,  110,   69,   75,  175,
       75,   75,   75,  101,  101,  101,   75,   75,   75,   75,
       75,   75,   75,   86,  104,   86,  104,  104,  112,  115,
      133,  115,  168,   86,  115,   86,  127,  127,  112,   86,
      130,  163,  121,  130,  121,   86,   87,  121,   87,  122,
      132,  122,  133,  132,  122,  135,  161,  135,   87,  136,
      135,  136,   87,  142,  136,  142,  158,  150,   87,   93,
      150,   93,   93,  156,   93,  142,  144,  155,  144,  142,

      157,  157,  154,  160,   93,   95,  160,  164,  144,  146,
      164,   95,  144,  143,  141,  174,   95,   95,  174,   95,
      103,  180,  140,  148,  180,  148,  103,  170,  139,  170,
      170,  103,  103,  128,  103,  124,  148,  182,  125,  148,
      182,  124,  190,  120,  190,  192,  124,  124,  192,  124,
      126,  198,  126,  201,  198,  190,  201,  209,  190,  209,
      209,  119,  126,  126,  126,  210,  126,  129,  210,  217,
      118,  219,  217,  129,  219,  117,  113,  227,  129,  129,
      227,  129,  138,  232,  109,  225,  232,  225,  138,  235,
      102,   99,  235,  138,  138,   97,  138,  145,  225,  145,

      240,  225,   96,  240,   90,   89,   83,   80,   78,   77,
      145,  145,   74,  145,  147,   72,   62,   58,   54,   53,
      147,   52,   51,   50,   45,  147,  147,   38,  147,  151,
       32,   27,   25,   24,   16,  151,    9,    8,    7,    0,
      151,  151,    0,  151,  152,    0,    0,    0,    0,    0,
      152,    0,    0,    0,    0,  152,  152,    0,  152,  159,
        0,    0,    0,    0,    0,  159,    0,    0,    0,    0,
      159,  159,    0,  159,  166,    0,    0,    0,    0,    0,
      166,    0,    0,    0,    0,  166,  166,    0,  166,  167,
        0,    0,    0,    0,    0,  167,    0,    0,    0,    0,

      167,  167,    0,  167,  169,    0,    0,    0,    0,    0,
      169,    0,    0,    0,    0,  169,  169,    0,  169,  171,
        0,    0,    0,    0,    0,  171,    0,    0,    0,    0,
      171,  171,  171,  171,  176,    0,    0,    0,    0,    0,
      176,    0,    0,    0,    0,  176,  176,    0,  176,  177,
        0,    0,    0,    0,    0,  177,    0,    0,    0,    0,
      177,  177,    0,  177,  179,    0,    0,    0,    0,    0,
      179,    0,    0,    0,    0,  179,  179,    0,  179,  181,
        0,    0,    0,    0,    0,  181,    0,    0,    0,    0,
      181,  181,    0,  181,  183,    0,    0,    0,    0,    0,

      183,    0,    0,    0,    0,  183,  183,    0,  183,  185,
        0,    0,    0,    0,    0,  185,    0,    0,    0,    0,
      185,  185,    0,  185,  186,    0,    0,    0,    0,    0,
      186,    0,    0,    0,    0,  186,  186,    0,  186,  189,
        0,    0,    0,    0,    0,  189,    0,    0,    0,    0,
      189,  189,    0,  189,  191,    0,  191,    0,    0,    0,
        0,    0,  191,    0,    0,    0,    0,  191,  191,    0,
      191,  193,    0,    0,    0,    0,    0,  193,    0,    0,
        0,    0,  193,  193,    0,  193,  194,    0,    0,    0,
        0,    0,  194,    0,    0,    0,    0,  194,  194,    0,

      194,  195,    0,    0,    0,    0,    0,  195,    0,    0,
        0,    0,  195,  195,    0,  195,  197,    0,    0,    0,
        0,    0,  197,    0,    0,    0,    0,  197,  197,    0,
      197,  199,    0,    0,    0,    0,    0,  199,    0,    0,
        0,    0,  199,  199,    0,  199,  203,    0,    0,    0,
        0,    0,  203,    0,    0,    0,    0,  203,  203,    0,
      203,  204,    0,    0,    0,    0,    0,  204,    0,    0,
        0,    0,  204,  204,    0,  204,  205,    0,    0,    0,
        0,    0,  205,    0,    0,    0,    0,  205,  205,    0,
      205,  206,    0,    0,    0,    0,    0,  206,    0,    0,

        0,    0,  206,  206,  206,  206,  208,    0,    0,    0,
        0,    0,  208,    0,    0,    0,    0,  208,  208,    0,
      208,  211,    0,    0,    0,    0,    0,  211,    0,    0,
        0,    0,  211,  211,    0,  211,  212,    0,    0,    0,
        0,    0,  212,    0,    0,    0,    0,  212,  212,    0,
      212,  213,    0,    0,    0,    0,    0,  213,    0,    0,
        0,    0,  213,  213,    0,  213,  214,    0,    0,    0,
        0,    0,  214,    0,    0,    0,    0,  214,  214,    0,
      214,  216,    0,    0,    0,    0,    0,  216,    0,    0,
        0,    0,  216,  216,    0,  216,  220,    0,    0,    0,

        0,    0,  220,    0,    0,    0,    0,  220,  220,    0,
      220,  221,    0,    0,    0,    0,    0,  221,    0,    0,
        0,    0,  221,  221,    0,  221,  222,    0,  222,    0,
        0,    0,    0,    0,  222,    0,    0,    0,    0,  222,
      222,    0,  222,  224,    0,    0,    0,    0,    0,  224,
        0,    0,    0,    0,  224,  224,    0,  224,  228,    0,
        0,    0,    0,    0,  228,    0,    0,    0,    0,  228,
      228,    0,  228,  229,    0,    0,    0,    0,    0,  229,
        0,    0,    0,    0,  229,  229,    0,  229,  231,    0,
        0,    0,    0,    0,  231,    0,    0,    0,    0,  231,

      231,    0,  231,  237,    0,    0,    0,    0,    0,  237,
        0,    0,    0,    0,  237,  237,    0,  237,  238,    0,
        0,    0,    0,    0,  238,    0,    0,    0,    0,  238,
      238,  238,  238,  241,    0,    0,    0,    0,    0,  241,
        0,    0,    0,    0,  241,  241,    0,  241,  242,    0,
        0,    0,    0,    0,  242,    0,    0,    0,    0,  242,
      242,    0,  242,  244,    0,    0,    0,    0,    0,  244,
        0,    0,    0,    0,  244,  244,    0,  244,  245,    0,
      245,    0,    0,    0,    0,    0,  245,    0,    0,    0,
        0,  245,  245,    0,  245,  247,    0,    0,    0,    0,

        0,  247,    0,    0,    0,    0,  247,  247,    0,  247,
      251,  251,  251,  251,  251,  251,  251,  251,  252,  252,
      252,  252,  252,  252,  252,  252,  253,  253,  253,  253,
      253,  253,  253,  253,  254,    0,  254,    0,  254,  255,
      255,  255,  255,  255,  255,    0,  255,  256,    0,  256,
      257,  257,    0,    0,  257,  257,  257,  258,    0,  258,
      259,    0,  259,  260,    0,  260,  260,  260,  260,  261,
      261,  261,  261,  261,  261,  261,  261,  263,  263,  263,
      263,  263,  263,  263,  263,  264,    0,  264,  265,    0,
      265,  266,    0,  266,  266,  266,  266,  267,    0,  267,

      267,  267,  267,  269,    0,  269,  270,    0,  270,  271,
        0,  271,  271,  271,  271,  272,    0,  272,  272,  272,
      272,  273,    0,  273,  275,    0,  275,  276,    0,  276,
      276,  276,  276,  277,    0,  277,  277,  277,  277,  278,
        0,  278,  279,    0,  279,  279,  279,  279,  280,    0,
      280,  280,  280,  280,  282,    0,  282,  282,  282,  282,
      283,    0,  283,  284,    0,  284,  284,  284,  284,  285,
        0,  285,  285,  285,  285,  286,    0,  286,  286,  286,
      286,  288,    0,  288,  289,    0,  289,  289,  289,  289,
      290,    0,  290,  290,  290,  290,  291,    0,  291,  291,

      291,  291,  292,    0,  292,  292,  292,  292,  294,    0,
      294,  294,  294,  294,  295,    0,  295,  295,  295,  295,
      296,    0,  296,  296,  296,  296,  297,    0,  297,  297,
      297,  297,  298,    0,  298,  298,  298,  298,  299,    0,
      299,  299,  299,  299,  300,    0,  300,  300,  300,  300,
      301,    0,  301,  301,  301,  301,  302,    0,  302,  302,
      302,  302,  303,    0,  303,  303,  303,  303,  304,    0,
      304,  304,  304,  304,  305,    0,  305,  305,  305,  305,
      306,    0,  306,  306,  306,  306,  307,    0,  307,  307,
      307,  307,  308,    0,  308,  308,  308,  308,  309,    0,

      309,  309,  309,  309,  310,    0,  310,  310,  310,  310,
      311,    0,  311,  311,  311,  311,  312,    0,  312,  312,
      312,  312,  313,    0,  313,  313,  313,  313,  314,    0,
      314,  314,  314,  314,  315,    0,  315,  315,  315,  315,
      316,    0,  316,  316,  316,  316,  250,  250,  250,  250,
      250,  250,  250,  250,  250,  250,  250,  250,  250,  250,
      250,  250,  250,  250,  250,  250,  250,  250,  250,  250,
      250,  250,  250,  250,  250,  250
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "simplexml.flex"
#define INITIAL 0
#line 3 "simplexml.flex"
    /**

    This flexer builds data_node trees out of a subset of XML. Node properties
    are stored/read as XML attributes, and sub-nodes are stored as XML
    elementes. The attribute name "s11n_class" is reserved for internal use.

    XML CDATA, which is not directly supported by the data_node interface,
    is stored in the property named "CDATA", available via
    data_node::get_string("CDATA").
    */

#define YY_SKIP_YYWRAP 1
int yywrap() { return 1; }

#include <stdio.h> // only for EOF definition
#include <cassert>
#include <iostream>
#include <string>
#include <stack>
#include <string>

#include <s11n.net/s11n/s11n_debuggering_macros.hpp> // CERR
#define PCERR if( 0 ) CERR

#include <s11n.net/s11n/io/data_node_io.hpp> // node_tree_builder class
#include <s11n.net/s11n/io/data_node_format.hpp> // funxml_serializer class

#include <s11n.net/s11n/io/simplexml_serializer.hpp> // simplexml_sharing_context

#include <s11n.net/s11n/io/strtool.hpp> // translate_entities()

#include <s11n.net/s11n/io/simplexml_data_nodeFlexLexer.hpp>

#define S11N_FACREG_TYPE simplexml_data_nodeFlexLexer
#define S11N_FACREG_TYPE_NAME "simplexml_data_nodeFlexLexer"
#define S11N_FACREG_INTERFACE_TYPE FlexLexer
#include <s11n.net/s11n/factory_reg.hpp>



//////////////////////////////////////////////////////////////////////
// workarounds for the (very outdated) flex output:
using std::cin;
using std::cout;
using std::cerr;
using std::endl;
//////////////////////////////////////////////////////////////////////


namespace
{
        typedef s11n::io::tree_builder_context<
                s11n::io::sharing::simplexml_sharing_context
        > BuilderContext;

        unsigned long bracedepth;
        std::string nodename;
        std::string nodeclass;
        std::string yystr;

        typedef std::stack<std::string> StringStack;
        StringStack cdata;

        void cleanup()
        {
                nodename = "";
                nodeclass = "";
                yystr = "";
                for( StringStack::size_type i = 0; i < cdata.size(); ++i ) cdata.pop();
		bracedepth = 0; // fixed in 1.1.3. W/o this, brace depth can be hosed after reading w/ this lexer multiple times.
                // treebuilder will be freed elsewhere.
        }
}

/** Internal code: note part of the public interface. */
namespace simplexml {

	// duplicated code from funtxt_serializer. TODO: consolidate into one utility function
        bool parseKVP( const std::string & str, std::string & key, std::string & val )
        { // todo: clean this shit up!!!
                PCERR << "parseKVP(["<<str<<"])\n";
                std::string delim = "=";
                std::string::size_type pos;
                pos = str.find_first_of( delim );
                key = str.substr( 0, pos );
                ::s11n::io::strtool::trim_string( key );
                if( std::string::npos == pos )
                {
                        val = "";
                        return true;
                }
                val = str.substr( pos+1 );
                // ::s11n::io::strtool::translate_entities( val, s11n::io::simplexml_serializer_translations(), true );
                PCERR << "prop ["<<key<<"]=["<<val<<"]"<<std::endl;
                return true;
        }

}



int sxml_data_node_close_node( const FlexLexer * context )
{
        // closing something
        if( bracedepth == BuilderContext::node_depth(context) )
        {
                const std::string & cd = cdata.top();
//                 stringutil::trim_string( cd );
                if( ! cd.empty() ) BuilderContext::add_property( context, "CDATA", cd );
                BuilderContext::close_node(context);
        }
        if( 0 == BuilderContext::node_depth(context) )
        {
                // return once we close the first top-level node.
                cleanup();
                return 0;
        }
        cdata.pop();
        --bracedepth;
        return BuilderContext::node_depth(context);
}
// QUOTED_STRING: doesn't yet handle escaped quotes-in-quotes. Need to use
//# separate states for that, i think. 
// CLASSNAME_CPP_NORMAL	((({WORD}\:\:)+)?({WORD}))
// CLASSNAME_CPP_TEMPLATE	(([a-zA-Z_])([a-zA-Z0-9_\.\:<>,])*)
// ESCAPED_MULTILINE	((.*\$)/[^(\\\n)]*)
// ESCAPED_MULTILINE	([.]+([^\\]\n$))
// {ESCAPED_MULTILINE}|
// PROPERTY_TYPES		({ESCAPED_MULTILINE})
//UNTIL_SEMICOLON		.+\;{SPACE}*$
//PROPERTY_VALUE		({NUMBER}|{ALMOST_A_WORD}|{QUOTED_STRING}|{WORD_WITH_PUNCTUATION}|{RGB_COLOR})
// WORD_WITH_PUNCTUATION	[#.\!\?\-_a-zA-Z0-9]+
//UNTIL_EOL		([.\n]+[^\\]$)
//ESCAPED_LINES		((.+([\\]\n))+[^\\]\n)
// COMMON_DEFINITIONS: See common_flex_definitions.in
// NUMBER is to help out s11n_node::deserialize_list/Map()
#define IN_ELEM_DECL 1

#define IN_COMMENT 2

#define IN_CDATA 3


/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif


#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen YY_PROTO(( yyconst char * ));
#endif

#ifndef YY_NO_INPUT
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
#define ECHO LexerOutput( yytext, yyleng )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( (result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) LexerError( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yyFlexLexer::yylex()
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		yy_current_buffer->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

YY_DECL
	{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;

#line 189 "simplexml.flex"


	// \<\!.+\n {
	//         continue;
	// 	}


	if ( yy_init )
		{
		yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yy_start )
			yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = &cin;

		if ( ! yyout )
			yyout = &cout;

		if ( ! yy_current_buffer )
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );

		yy_load_buffer_state();
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start;
		yy_current_state += YY_AT_BOL();
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yy_last_accepting_state = yy_current_state;
				yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 251 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 250 );
		yy_cp = yy_last_accepting_cpos;
		yy_current_state = yy_last_accepting_state;

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;


do_action:	/* This label is used only to access EOF actions. */


		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yy_hold_char;
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 195 "simplexml.flex"
{;} // todo: add a state to read through these!
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 197 "simplexml.flex"
{
	BEGIN IN_CDATA;
	}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 201 "simplexml.flex"
{
        BEGIN 0;
	}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 205 "simplexml.flex"
{continue;}
	YY_BREAK
case 5:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 206 "simplexml.flex"
{continue;}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 208 "simplexml.flex"
{
        if( ! cdata.empty() ) cdata.top() += YYText();
        continue;
	}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 213 "simplexml.flex"
{
	yystr = YYText();
        //COUT << "opening element? "<<yystr<<std::endl;
        nodename = yystr.substr( 1 );
        BuilderContext::open_node(this, "NoClassYet", nodename);
        cdata.push(std::string());

        ++bracedepth;
        BEGIN IN_ELEM_DECL;
	}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 224 "simplexml.flex"
{
		std::string key;
		std::string attr;
		if( ! ::simplexml::parseKVP( YYText(), key, attr ) )
                {
		        CERR << "syntax error: could not parse key=value from ["<<YYText()<<"]"<<std::endl;
                        cleanup();
                        return 0;
                }

                if( attr.size() >= 2 )
                { // strip quotes
	                attr.erase(attr.begin());
                        attr.erase(attr.end()-1);
                }
                ::s11n::io::strtool::translate_entities( attr, s11n::io::simplexml_serializer_translations(), true );
                if( "s11n_class" == key  )
                {
                        BuilderContext::change_node_class( this, attr );
                }
                else
                {
                	BuilderContext::add_property( this, key, attr );
                }
                //CERR << "property val=["<<attr<<"] --> ["<<propval<<"]"<<std::endl;
	}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 251 "simplexml.flex"
{
        if( 0 == sxml_data_node_close_node(this) ) return 0;
        BEGIN 0;
	}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 256 "simplexml.flex"
{
        // closing element decl.
	//yystr = YYText();
        BEGIN 0;
	}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 262 "simplexml.flex"
{
        CERR << "syntax error: we found a '<' character inside an element declaration." << std::endl;
        cleanup();
        return 0;
        ;
	}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 269 "simplexml.flex"
{;}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 271 "simplexml.flex"
{
        if( 0 == sxml_data_node_close_node(this) ) return 0;
	BEGIN 0;
	}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 276 "simplexml.flex"
{
	//COUT << "entering comment..." << std::endl;
        BEGIN IN_COMMENT;
	}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 281 "simplexml.flex"
{
	CERR << "syntax error: you may not have comments within comments." << std::endl;
        cleanup();
	return 0;
        //BEGIN 0;
	}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 288 "simplexml.flex"
{
	//COUT << "... exiting comment" << std::endl;
        BEGIN 0;
	}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 292 "simplexml.flex"
{;}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 294 "simplexml.flex"
{;} // swallow it
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 296 "simplexml.flex"
ECHO;
	YY_BREAK
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(IN_ELEM_DECL):
case YY_STATE_EOF(IN_COMMENT):
case YY_STATE_EOF(IN_CDATA):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yy_n_chars = yy_current_buffer->yy_n_chars;
			yy_current_buffer->yy_input_file = yyin;
			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yy_last_accepting_cpos;
				yy_current_state = yy_last_accepting_state;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yy_did_buffer_switch_on_eof = 0;

				if ( yywrap() )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */

yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout )
	{
	yyin = arg_yyin;
	yyout = arg_yyout;
	yy_c_buf_p = 0;
	yy_init = 1;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = 0;

	yy_current_buffer = 0;

#ifdef YY_USES_REJECT
	yy_state_buf = new yy_state_type[YY_BUF_SIZE + 2];
#else
	yy_state_buf = 0;
#endif
	}

yyFlexLexer::~yyFlexLexer()
	{
	delete yy_state_buf;
	yy_delete_buffer( yy_current_buffer );
	}

void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
	{
	if ( new_in )
		{
		yy_delete_buffer( yy_current_buffer );
		yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE ) );
		}

	if ( new_out )
		yyout = new_out;
	}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
	{
	if ( yyin->eof() || yyin->fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin->get( buf[0] );

	if ( yyin->eof() )
		return 0;

	if ( yyin->bad() )
		return -1;

	return 1;

#else
	(void) yyin->read( buf, max_size );

	if ( yyin->bad() )
		return -1;
	else
		return yyin->gcount();
#endif
	}

void yyFlexLexer::LexerOutput( const char* buf, int size )
	{
	(void) yyout->write( buf, size );
	}

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

int yyFlexLexer::yy_get_next_buffer()
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( yy_current_buffer->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_current_buffer->yy_n_chars = yy_n_chars = 0;

	else
		{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset =
				(int) (yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yy_flex_realloc( (void *) b->yy_ch_buf,
							 b->yy_buf_size + 2 );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );

		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	if ( yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

	return ret_val;
	}


/* yy_get_previous_state - get the state just before the EOB char was reached */

yy_state_type yyFlexLexer::yy_get_previous_state()
	{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = yy_start;
	yy_current_state += YY_AT_BOL();

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yy_last_accepting_state = yy_current_state;
			yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 251 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
	}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
	{
	register int yy_is_jam;
	register char *yy_cp = yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yy_last_accepting_state = yy_current_state;
		yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 251 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 250);

	return yy_is_jam ? 0 : yy_current_state;
	}


void yyFlexLexer::yyunput( int c, register char* yy_bp )
	{
	register char *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
		register char *source =
				&yy_current_buffer->yy_ch_buf[number_to_move];

		while ( source > yy_current_buffer->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		yy_current_buffer->yy_n_chars =
			yy_n_chars = yy_current_buffer->yy_buf_size;

		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;


	yytext_ptr = yy_bp;
	yy_hold_char = *yy_cp;
	yy_c_buf_p = yy_cp;
	}


int yyFlexLexer::yyinput()
	{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yy_c_buf_p - yytext_ptr;
			++yy_c_buf_p;

			switch ( yy_get_next_buffer() )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/* fall through */

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap() )
						return EOF;

					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p = yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;

	yy_current_buffer->yy_at_bol = (c == '\n');

	return c;
	}


void yyFlexLexer::yyrestart( std::istream* input_file )
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
	}


void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
	{
	if ( yy_current_buffer == new_buffer )
		return;

	if ( yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
	}


void yyFlexLexer::yy_load_buffer_state()
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
	}


void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
	{
	if ( ! b )
		return;

	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yy_flex_free( (void *) b->yy_ch_buf );

	yy_flex_free( (void *) b );
	}


extern "C" int isatty YY_PROTO(( int ));
void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream* file )

	{
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

	b->yy_is_interactive = 0;
	}


void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
	{
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == yy_current_buffer )
		yy_load_buffer_state();
	}


#ifndef YY_NO_SCAN_BUFFER
#endif


#ifndef YY_NO_SCAN_STRING
#endif


#ifndef YY_NO_SCAN_BYTES
#endif


#ifndef YY_NO_PUSH_STATE
void yyFlexLexer::yy_push_state( int new_state )
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		yy_size_t new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );

		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );

		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );

		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}
#endif


#ifndef YY_NO_POP_STATE
void yyFlexLexer::yy_pop_state()
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}
#endif


#ifndef YY_NO_TOP_STATE
int yyFlexLexer::yy_top_state()
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif


void yyFlexLexer::LexerError( yyconst char msg[] )
	{
	cerr << msg << '\n';
	exit( YY_EXIT_FAILURE );
	}


/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif

#ifdef YY_NEED_STRLEN
#ifdef YY_USE_PROTOS
static int yy_flex_strlen( yyconst char *s )
#else
static int yy_flex_strlen( s )
yyconst char *s;
#endif
	{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
	}
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
	{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
	}

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}

#if YY_MAIN
int main()
	{
	yylex();
	return 0;
	}
#endif
#line 296 "simplexml.flex"




#if SIMPLEXML_DO_MAIN
int main( int argc, char ** argv )
{
        using namespace s11n;
        return 0;
}

#endif

