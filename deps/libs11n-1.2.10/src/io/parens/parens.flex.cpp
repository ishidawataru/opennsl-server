#define yyFlexLexer parens_data_nodeFlexLexer
#define yywrap parens_data_nodewrap

/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header: /home/daffy/u0/vern/flex/RCS/flex.skl,v 2.91 96/09/10 16:58:48 vern Exp $
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5



/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>
#include <iostream>

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
	{
	std::istream* yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};


/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer



static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t ));
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)

typedef unsigned char YY_CHAR;
#define yytext_ptr yytext

#include <s11n.net/s11n/io/FlexLexer.hpp>


/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 19
#define YY_END_OF_BUFFER 20
static yyconst short int yy_accept[115] =
    {   0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       20,   18,   17,   17,   18,    7,   15,   18,    7,   19,
       10,   12,   19,   19,   11,   14,   13,   19,   19,    8,
        8,    5,    4,    4,    5,    5,    5,    0,    0,    0,
        6,    7,    1,    0,    0,    0,   10,   12,    0,    0,
        0,   13,   13,    0,    0,    0,    8,    8,    8,    8,
        0,    8,    0,    4,    3,    0,    9,    0,   13,    0,
        0,    0,    0,    8,    2,    0,   13,    0,    0,   13,
        0,    8,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   13,   13,    0,    0,    0,    0,    0,    0,    0,

       13,    0,    0,   13,    0,    0,    0,    0,    0,    0,
       13,   16,    0,    0
    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    4,    1,    5,    6,    1,    1,    1,    7,    8,
        9,   10,   11,   12,   11,   13,    1,   14,   15,   14,
       14,   14,   14,   14,   14,   14,   14,   16,    6,   17,
       18,   19,    1,    1,   20,   20,   20,   20,   21,   22,
       20,   20,   20,   20,   20,   20,   20,   20,   23,   20,
       20,   20,   20,   20,   20,   20,   20,   20,   20,   20,
        1,   24,    1,    1,   25,    1,   26,   20,   20,   20,

       27,   20,   20,   20,   20,   20,   20,   20,   20,   28,
       20,   29,   20,   30,   31,   20,   20,   20,   20,   20,
       20,   20,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst int yy_meta[32] =
    {   0,
        1,    2,    1,    3,    4,    1,    1,    1,    1,    1,
        1,    5,    1,    6,    6,    7,    7,    8,    5,    6,
        6,    6,    6,    1,    6,    6,    6,    6,    6,    6,
        6
    } ;

static yyconst short int yy_base[135] =
    {   0,
        0,  276,   31,    0,   62,    0,   92,  115,  129,    0,
      281,  522,   95,  522,  277,   96,  522,  261,  101,  522,
      105,  118,  253,  269,  522,  522,   98,  113,  109,  159,
      108,  265,  127,  131,  136,  143,  522,  163,  271,  270,
      522,  160,  522,  254,  263,  253,  173,  179,  163,  165,
      258,  522,  131,  248,    0,  164,    0,  188,  189,  167,
      184,  202,  254,  208,  522,  239,  522,  245,  192,    0,
      213,  207,  170,  222,  522,  231,  184,  238,  234,  189,
      199,  229,  240,    0,  204,  231,  250,  266,  212,  221,
      282,  223,  298,  209,  229,  314,  204,  330,  346,  201,

      362,  208,  378,  233,  191,    0,  239,  176,  394,  187,
      410,  522,    0,  522,  429,  437,  440,  448,  456,  459,
      465,  165,  132,  469,  474,   98,  479,  484,  489,  494,
      499,  504,  509,  514
    } ;

static yyconst short int yy_def[135] =
    {   0,
      114,    1,  114,    3,  114,    5,  115,  115,    5,    9,
      114,  114,  114,  114,  116,  114,  114,  117,  114,  114,
      114,  114,  118,  119,  114,  114,  120,  114,  114,  114,
      121,  114,  114,  114,  114,  114,  114,  114,  116,  116,
      114,  114,  114,  117,  114,  114,  114,  114,  118,  118,
      119,  114,  120,  114,  122,  114,   30,  114,  114,   58,
      114,  121,  114,  114,  114,  114,  114,  114,  118,  123,
      124,  114,  114,  114,  114,  114,  123,  125,  124,  125,
      114,  114,  114,  126,  125,  114,  127,  128,  114,  129,
      127,  129,  128,  114,  129,  130,  114,  131,  132,  114,

      131,  133,  132,  133,  114,   91,  133,  114,  134,  114,
      134,  114,  103,    0,  114,  114,  114,  114,  114,  114,
      114,  114,  114,  114,  114,  114,  114,  114,  114,  114,
      114,  114,  114,  114
    } ;

static yyconst short int yy_nxt[554] =
    {   0,
       12,   13,   14,   13,   12,   15,   12,   16,   17,   12,
       12,   12,   12,   12,   12,   12,   12,   12,   12,   18,
       18,   18,   18,   12,   18,   18,   18,   18,   18,   18,
       18,   20,   21,   22,   21,   23,   20,   24,   20,   25,
       20,   20,   20,   26,   27,   27,   20,   20,   20,   20,
       27,   27,   27,   27,   20,   27,   27,   27,   27,   27,
       27,   27,   20,   20,   20,   20,   20,   20,   20,   20,
       20,   20,   28,   20,   29,   30,   30,   20,   20,   20,
       20,   31,   31,   31,   31,   20,   31,   31,   31,   31,
       31,   31,   31,   33,   34,   33,   38,   42,   38,   42,

       39,   35,   42,   87,   42,   43,   47,   48,   47,   59,
       43,   59,   36,   54,   55,   37,   33,   34,   33,   48,
       48,   48,   58,   58,   35,   56,   57,   57,   64,   64,
       64,   46,   64,   64,   64,   36,   63,   77,   37,   20,
       63,   20,   20,   20,   65,   63,   54,   55,   20,   20,
       20,   20,   63,   20,   20,   20,   20,   20,   20,   20,
       59,   42,   59,   42,   38,   66,   38,   52,   39,   69,
       71,   60,   57,   57,   47,   48,   47,   58,   58,   61,
       48,   48,   48,   74,   74,   61,   50,   61,   50,   59,
       59,   59,   59,   61,   73,  112,   52,   74,   74,   54,

       84,   58,   58,   59,   85,   59,  110,   80,   72,   64,
       64,   64,   82,   82,   72,   50,   78,   81,  108,   88,
       82,   82,   80,   59,   78,   59,  104,  105,   78,   78,
       59,   80,   59,  100,   97,   74,   74,   78,   95,   92,
       94,   92,   82,   82,   98,   78,   89,   92,  107,   78,
       78,  104,   80,   90,  109,   86,   80,  104,   83,   76,
       75,   90,   65,   70,   52,   90,   90,   68,   92,   78,
       67,   45,   41,   41,   63,   52,   50,   78,   45,   41,
      114,   78,   78,   19,   80,   90,  114,  114,  114,  114,
      114,  114,  114,   90,  114,  114,  114,   90,   90,  114,

       92,   78,  114,  114,  114,  114,  114,  114,  114,   78,
      114,  114,  114,   85,   96,  114,   80,   78,  114,  114,
      114,  114,  114,  114,  114,   78,  114,  114,  114,   78,
       78,  114,   80,   90,  114,  114,  114,  114,  114,  114,
      114,   90,  114,  114,  114,   90,   90,  114,   92,  102,
      114,  114,  114,  114,  114,  114,  114,  102,  114,  114,
      114,  102,  102,  114,  104,   90,  114,  114,  114,  114,
      114,  114,  114,   90,  114,  114,  114,   95,  106,  114,
       92,  102,  114,  114,  114,  114,  114,  114,  114,  102,
      114,  114,  114,  102,  102,  114,  104,  102,  114,  114,

      114,  114,  114,  114,  114,  102,  114,  114,  114,  102,
      102,  114,  104,  102,  114,  114,  114,  114,  114,  114,
      114,  102,  114,  114,  114,  107,  113,  114,  104,   32,
       32,   32,   32,   32,   32,   32,   32,   40,   40,   40,
       40,   40,   40,   40,   40,   44,  114,   44,   49,   49,
       49,  114,   49,   49,   49,   49,   51,   51,   51,   51,
       51,   51,   51,   51,   53,   53,   62,   62,  114,  114,
       62,   79,  114,   79,   79,   79,   78,  114,   78,   78,
       78,   91,  114,   91,   91,   91,   93,  114,   93,   93,
       93,   90,  114,   90,   90,   90,   99,  114,   99,   99,

       99,  101,  114,  101,  101,  101,  103,  114,  103,  103,
      103,  102,  114,  102,  102,  102,  111,  114,  111,  111,
      111,   11,  114,  114,  114,  114,  114,  114,  114,  114,
      114,  114,  114,  114,  114,  114,  114,  114,  114,  114,
      114,  114,  114,  114,  114,  114,  114,  114,  114,  114,
      114,  114,  114
    } ;

static yyconst short int yy_chk[554] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    7,    7,    7,   13,   16,   13,   16,

       13,    7,   19,  126,   19,   16,   21,   21,   21,   31,
       19,   31,    7,   27,   27,    7,    8,    8,    8,   22,
       22,   22,   29,   29,    8,   28,   28,   28,   33,   33,
       33,   19,   34,   34,   34,    8,   33,  123,    8,    9,
       34,    9,    9,    9,   35,   35,   53,   53,    9,    9,
        9,    9,   36,    9,    9,    9,    9,    9,    9,    9,
       30,   42,   30,   42,   38,   36,   38,   49,   38,   50,
      122,   30,   30,   30,   47,   47,   47,   56,   56,   30,
       48,   48,   48,   73,   73,   30,   49,   60,   50,   58,
       59,   58,   59,   60,   61,  110,   69,   61,   61,   77,

       77,   58,   58,   62,   80,   62,  108,   80,   58,   64,
       64,   64,   81,   81,   58,   69,   71,   72,  105,   85,
       72,   72,   85,   74,   71,   74,  102,  100,   71,   71,
       82,   71,   82,   97,   94,   74,   74,   79,   92,   90,
       89,   92,   82,   82,   95,   79,   86,   95,  104,   79,
       79,  104,   79,   87,  107,   83,   78,  107,   76,   68,
       66,   87,   63,   54,   51,   87,   87,   46,   87,   88,
       45,   44,   40,   39,   32,   24,   23,   88,   18,   15,
       11,   88,   88,    2,   88,   91,    0,    0,    0,    0,
        0,    0,    0,   91,    0,    0,    0,   91,   91,    0,

       91,   93,    0,    0,    0,    0,    0,    0,    0,   93,
        0,    0,    0,   93,   93,    0,   93,   96,    0,    0,
        0,    0,    0,    0,    0,   96,    0,    0,    0,   96,
       96,    0,   96,   98,    0,    0,    0,    0,    0,    0,
        0,   98,    0,    0,    0,   98,   98,    0,   98,   99,
        0,    0,    0,    0,    0,    0,    0,   99,    0,    0,
        0,   99,   99,    0,   99,  101,    0,    0,    0,    0,
        0,    0,    0,  101,    0,    0,    0,  101,  101,    0,
      101,  103,    0,    0,    0,    0,    0,    0,    0,  103,
        0,    0,    0,  103,  103,    0,  103,  109,    0,    0,

        0,    0,    0,    0,    0,  109,    0,    0,    0,  109,
      109,    0,  109,  111,    0,    0,    0,    0,    0,    0,
        0,  111,    0,    0,    0,  111,  111,    0,  111,  115,
      115,  115,  115,  115,  115,  115,  115,  116,  116,  116,
      116,  116,  116,  116,  116,  117,    0,  117,  118,  118,
      118,    0,  118,  118,  118,  118,  119,  119,  119,  119,
      119,  119,  119,  119,  120,  120,  121,  121,    0,    0,
      121,  124,    0,  124,  124,  124,  125,    0,  125,  125,
      125,  127,    0,  127,  127,  127,  128,    0,  128,  128,
      128,  129,    0,  129,  129,  129,  130,    0,  130,  130,

      130,  131,    0,  131,  131,  131,  132,    0,  132,  132,
      132,  133,    0,  133,  133,  133,  134,    0,  134,  134,
      134,  114,  114,  114,  114,  114,  114,  114,  114,  114,
      114,  114,  114,  114,  114,  114,  114,  114,  114,  114,
      114,  114,  114,  114,  114,  114,  114,  114,  114,  114,
      114,  114,  114
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "parens.flex"
#define INITIAL 0
#line 3 "parens.flex"
/**
LICENSE: Public Domain
Author: stephan - stephan@s11n.net

This lexer reads in a lisp-like (but not lisp) grammar for the s11n
framework. It's output partner is s11n::paren_serializer.

Sample:

nodename=(ImplClassName (propery_name property value) (prop2 value of \) prop2) 
	another_node=(ns::ClassName)
)

nodename represents an s11n node name. ImplClassName represents the
object's implementation class name.

Note that closing parens in your data must be backslash-escaped. This
parser arguably strips all non-paired backslashes, so any actual
backslashes must also be escaped (C-style). The parens_serializer takes
this into account and escapes it's serialized data.

On parse errors it throws a std::runtime_exception.

*/

#define YY_SKIP_YYWRAP 1
int yywrap() { return 1; }

#include <stdio.h> // only for EOF definition
#include <iostream>
#include <string>
#include <stdexcept>

//////////////////////////////////////////////////////////////////////
// workarounds for the (very outdated) flex output:
using std::cin;
using std::cout;
using std::cerr;
using std::endl;
//////////////////////////////////////////////////////////////////////


#include <s11n.net/s11n/s11n_debuggering_macros.hpp> // CERR
#define PCERR if( 0 ) CERR << "parens lexer: " 

#include <s11n.net/s11n/io/strtool.hpp> // translate_entities()
#include <s11n.net/s11n/io/data_node_io.hpp> // node_tree_builder
#include <s11n.net/s11n/io/parens_serializer.hpp> // parens_serializer

#include <s11n.net/s11n/io/parens_data_nodeFlexLexer.hpp>
#define S11N_FACREG_TYPE parens_data_nodeFlexLexer
#define S11N_FACREG_TYPE_NAME "parens_data_nodeFlexLexer"
#define S11N_FACREG_INTERFACE_TYPE FlexLexer
#include <s11n.net/s11n/factory_reg.hpp>

namespace  {

        typedef s11n::io::tree_builder_context<
                s11n::io::sharing::parens_sharing_context
        > BuilderContext;
}

#define METADATA(PROP) (BuilderContext::metadata(this).PROP)

// QUOTED_STRING: doesn't yet handle escaped quotes-in-quotes. Need to use
//# separate states for that, i think. 
// CLASSNAME_CPP_NORMAL	((({WORD}\:\:)+)?({WORD}))
// CLASSNAME_CPP_TEMPLATE	(([a-zA-Z_])([a-zA-Z0-9_\.\:<>,])*)
// ESCAPED_MULTILINE	((.*\$)/[^(\\\n)]*)
// ESCAPED_MULTILINE	([.]+([^\\]\n$))
// {ESCAPED_MULTILINE}|
// PROPERTY_TYPES		({ESCAPED_MULTILINE})
//UNTIL_SEMICOLON		.+\;{SPACE}*$
//PROPERTY_VALUE		({NUMBER}|{ALMOST_A_WORD}|{QUOTED_STRING}|{WORD_WITH_PUNCTUATION}|{RGB_COLOR})
// WORD_WITH_PUNCTUATION	[#.\!\?\-_a-zA-Z0-9]+
//UNTIL_EOL		([.\n]+[^\\]$)
//ESCAPED_LINES		((.+([\\]\n))+[^\\]\n)
#define OPEN_CLASS 1

#define IN_PROPERTY 2

#define IN_COMMENT_BLOCK 3

// experimental:
#define IN_METADATA 4


/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif


#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen YY_PROTO(( yyconst char * ));
#endif

#ifndef YY_NO_INPUT
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
#define ECHO LexerOutput( yytext, yyleng )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( (result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) LexerError( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yyFlexLexer::yylex()
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		yy_current_buffer->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

YY_DECL
	{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;

#line 137 "parens.flex"



	if ( yy_init )
		{
		yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yy_start )
			yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = &cin;

		if ( ! yyout )
			yyout = &cout;

		if ( ! yy_current_buffer )
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );

		yy_load_buffer_state();
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start;
		yy_current_state += YY_AT_BOL();
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yy_last_accepting_state = yy_current_state;
				yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 115 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 114 );
		yy_cp = yy_last_accepting_cpos;
		yy_current_state = yy_last_accepting_state;

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;


do_action:	/* This label is used only to access EOF actions. */


		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yy_hold_char;
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 139 "parens.flex"
{ // (* comment blocks *)
	BEGIN IN_COMMENT_BLOCK;
	}
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 143 "parens.flex"
{
        PCERR << "hit EOF in a (*comment block*)." << std::endl;
        throw std::runtime_error( "hit EOF in a (*comment block*)" );
        return 0;
	}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 148 "parens.flex"
{ /* this match isn't 100% correct.*/ BEGIN 0; }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 149 "parens.flex"
{ continue;}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 150 "parens.flex"
{ continue;}
	YY_BREAK
case 6:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 152 "parens.flex"
{;} // comment lines
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 156 "parens.flex"
{
        BEGIN IN_PROPERTY;
	}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 160 "parens.flex"
{ // key name of property
        std::string propname = YYText();

        // strip leading/trailing spaces from the property name:
        static const std::string avoid = " \t\n";
        std::string::size_type tail = propname.find_last_not_of( avoid );
        propname = propname.substr( propname.find_first_not_of( avoid ),
                                    (std::string::npos == tail) ? tail : (tail + 1) );
        PCERR << "reading property ["<<propname<<"]...";

        // Now we consider all data until a non-escaped closing brace
        // to be the value of the property...
        std::string propval = "";
        unsigned char c = yyinput();
        bool escaped = false;
        while( 0 != c )
        {
                if( (!escaped) && ('\\' == c) )
                { // next char will be considered escaped
                        escaped = true;
                        propval += c;
                        c = yyinput();
                        continue;
                }
                if ( (!escaped) && (')' == c) )
                {
                        // Look for a non-escaped paren to close us.
                        break;
                }
                escaped = false;
                propval += c;
                c = yyinput();
                //PCERR << "["<<c<<"]\n";
        }
        if( 0 == c )
        {
                std::string errmsg = "Reached EOF while reading value for property '" + propname + "'. This shouldn't happen.";
                PCERR << errmsg << std::endl;
                throw std::runtime_error( errmsg );
                return 0;
        }

        ::s11n::io::strtool::translate_entities( propval, s11n::io::parens_serializer_translations(), true );
        //std::cout << "["<<propval<<"]"<<std::endl;
        PCERR << "Setting property: ["<<propname<<"]=["<<propval<<"]\n";
        BuilderContext::add_property( this, propname, propval );
        BEGIN 0;
	}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 209 "parens.flex"
{
        std::string tmpstr = YYText();
        METADATA(nodename) = tmpstr.substr( 0, tmpstr.find( "=" ) );
        PCERR << "opener: node name="<<METADATA(nodename)<<std::endl;
        BEGIN OPEN_CLASS;
	}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 217 "parens.flex"
{;}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 219 "parens.flex"
{ // special case: empty node:
        --METADATA(internaldepth);
        BEGIN 0;
	}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 223 "parens.flex"
{;}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 225 "parens.flex"
{
        std::string & nodename = METADATA(nodename);
        std::string & nodeclass = METADATA(nodeclass);
        nodeclass = std::string(YYText());
        if( nodeclass.empty() )
        {
                std::string errmsg = "nodes may not have empty names!";
                PCERR << errmsg <<std::endl;
                throw std::runtime_error( errmsg );
                return 0;
        }
        if( ('\"' == nodeclass[0]) || ('\'' == nodeclass[0]) )
        { // remove quotes from class name
                nodeclass.erase(0,1);
                nodeclass.resize(nodeclass.size()-1); // chop trailing quote
        }

        PCERR << "opening '"<<nodename<<"', class=" << nodeclass << std::endl;
        ++METADATA(internaldepth);
        if( ! BuilderContext::open_node( this, nodeclass, nodename ) )
        {
                std::string errmsg = "open_node(" + nodeclass + "," + nodename + ") failed.";
                PCERR<< errmsg << std::endl;
                throw std::runtime_error( errmsg );
                return 0;
        }
        BEGIN 0;
	}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 254 "parens.flex"
{
        std::string & nodename = METADATA(nodename);
        std::string errmsg = "did not find class name after '" + nodename + "'.";
        PCERR << errmsg << std::endl;
        throw std::runtime_error( errmsg );
        return 0;
	}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 262 "parens.flex"
{
        PCERR << METADATA(internaldepth)<< " Closing node" << std::endl;
        BuilderContext::close_node( this );
        size_t & node_depth = METADATA(internaldepth);
        --node_depth;
        if( 0 == BuilderContext::node_depth( this ) )
        {
                // stop once we close the first top-level node.
                return 0;
        }
	}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 275 "parens.flex"
{ continue;} // magic cookie
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 277 "parens.flex"
{;}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 279 "parens.flex"
{ PCERR << "Unexpected token: [" << YYText()<<"]"<<std::endl;}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 282 "parens.flex"
ECHO;
	YY_BREAK
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(OPEN_CLASS):
case YY_STATE_EOF(IN_PROPERTY):
case YY_STATE_EOF(IN_COMMENT_BLOCK):
case YY_STATE_EOF(IN_METADATA):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yy_n_chars = yy_current_buffer->yy_n_chars;
			yy_current_buffer->yy_input_file = yyin;
			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yy_last_accepting_cpos;
				yy_current_state = yy_last_accepting_state;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yy_did_buffer_switch_on_eof = 0;

				if ( yywrap() )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */

yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout )
	{
	yyin = arg_yyin;
	yyout = arg_yyout;
	yy_c_buf_p = 0;
	yy_init = 1;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = 0;

	yy_current_buffer = 0;

#ifdef YY_USES_REJECT
	yy_state_buf = new yy_state_type[YY_BUF_SIZE + 2];
#else
	yy_state_buf = 0;
#endif
	}

yyFlexLexer::~yyFlexLexer()
	{
	delete yy_state_buf;
	yy_delete_buffer( yy_current_buffer );
	}

void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
	{
	if ( new_in )
		{
		yy_delete_buffer( yy_current_buffer );
		yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE ) );
		}

	if ( new_out )
		yyout = new_out;
	}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
	{
	if ( yyin->eof() || yyin->fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin->get( buf[0] );

	if ( yyin->eof() )
		return 0;

	if ( yyin->bad() )
		return -1;

	return 1;

#else
	(void) yyin->read( buf, max_size );

	if ( yyin->bad() )
		return -1;
	else
		return yyin->gcount();
#endif
	}

void yyFlexLexer::LexerOutput( const char* buf, int size )
	{
	(void) yyout->write( buf, size );
	}

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

int yyFlexLexer::yy_get_next_buffer()
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( yy_current_buffer->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_current_buffer->yy_n_chars = yy_n_chars = 0;

	else
		{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset =
				(int) (yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yy_flex_realloc( (void *) b->yy_ch_buf,
							 b->yy_buf_size + 2 );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );

		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	if ( yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

	return ret_val;
	}


/* yy_get_previous_state - get the state just before the EOB char was reached */

yy_state_type yyFlexLexer::yy_get_previous_state()
	{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = yy_start;
	yy_current_state += YY_AT_BOL();

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yy_last_accepting_state = yy_current_state;
			yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 115 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
	}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
	{
	register int yy_is_jam;
	register char *yy_cp = yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yy_last_accepting_state = yy_current_state;
		yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 115 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 114);

	return yy_is_jam ? 0 : yy_current_state;
	}


void yyFlexLexer::yyunput( int c, register char* yy_bp )
	{
	register char *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
		register char *source =
				&yy_current_buffer->yy_ch_buf[number_to_move];

		while ( source > yy_current_buffer->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		yy_current_buffer->yy_n_chars =
			yy_n_chars = yy_current_buffer->yy_buf_size;

		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;


	yytext_ptr = yy_bp;
	yy_hold_char = *yy_cp;
	yy_c_buf_p = yy_cp;
	}


int yyFlexLexer::yyinput()
	{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yy_c_buf_p - yytext_ptr;
			++yy_c_buf_p;

			switch ( yy_get_next_buffer() )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/* fall through */

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap() )
						return EOF;

					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p = yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;

	yy_current_buffer->yy_at_bol = (c == '\n');

	return c;
	}


void yyFlexLexer::yyrestart( std::istream* input_file )
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
	}


void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
	{
	if ( yy_current_buffer == new_buffer )
		return;

	if ( yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
	}


void yyFlexLexer::yy_load_buffer_state()
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
	}


void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
	{
	if ( ! b )
		return;

	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yy_flex_free( (void *) b->yy_ch_buf );

	yy_flex_free( (void *) b );
	}


extern "C" int isatty YY_PROTO(( int ));
void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream* file )

	{
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

	b->yy_is_interactive = 0;
	}


void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
	{
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == yy_current_buffer )
		yy_load_buffer_state();
	}


#ifndef YY_NO_SCAN_BUFFER
#endif


#ifndef YY_NO_SCAN_STRING
#endif


#ifndef YY_NO_SCAN_BYTES
#endif


#ifndef YY_NO_PUSH_STATE
void yyFlexLexer::yy_push_state( int new_state )
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		yy_size_t new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );

		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );

		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );

		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}
#endif


#ifndef YY_NO_POP_STATE
void yyFlexLexer::yy_pop_state()
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}
#endif


#ifndef YY_NO_TOP_STATE
int yyFlexLexer::yy_top_state()
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif


void yyFlexLexer::LexerError( yyconst char msg[] )
	{
	cerr << msg << '\n';
	exit( YY_EXIT_FAILURE );
	}


/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif

#ifdef YY_NEED_STRLEN
#ifdef YY_USE_PROTOS
static int yy_flex_strlen( yyconst char *s )
#else
static int yy_flex_strlen( s )
yyconst char *s;
#endif
	{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
	}
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
	{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
	}

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}

#if YY_MAIN
int main()
	{
	yylex();
	return 0;
	}
#endif
#line 282 "parens.flex"

// ^{SPACE}*[#;].*$ {;} // comment lines
// [#;][^{OPENER}]* {;} // comments trailing after node closures



#undef METADATA
#undef PCERR
